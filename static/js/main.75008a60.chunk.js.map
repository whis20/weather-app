{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["ReactFitText","require","AppTitle","styled","h1","api","App","useState","query","setQuery","weather","setWeather","className","main","temp","icon","charAt","type","placeholder","onChange","e","target","value","onKeyPress","evt","key","fetch","then","res","json","result","console","log","id","compressor","format","interval","ticking","name","sys","country","d","day","getDay","date","getDate","month","getMonth","year","getFullYear","dateBuilder","Date","alt","src","description","Math","round","feels_like","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.75008a60.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport styled from 'styled-components';\nimport Clock from 'react-live-clock';\nimport { Switch } from 'antd';\nimport moment from 'moment';\nimport 'moment-timezone';\nvar ReactFitText = require('react-fittext');\n\nconst AppTitle = styled.h1`\n  display: block;\n  height: 64px;\n  margin: 0;\n  margin-left:20px;\n  padding: 20px 0;\n  font-size: 30px;\n  text-transform: uppercase;\n  font-weight: 500;\n  color:white;\n  transition: 0.3s 1.4s;\n  opacity: 0.9;\n`;\n\nconst api = {\n  key: \"39e981204a973302ee09996a6c666301\",\n  base: \"https://api.openweathermap.org/data/2.5/\"\n}\n\n\nfunction App() {\n\n  const [query, setQuery] = useState('');\n  const [weather, setWeather] = useState({});\n\n  const search = evt => {\n    if (evt.key === \"Enter\") {\n      fetch(`${api.base}weather?q=${query}&units=metric&APPID=${api.key}`)  ////inits=matric for Celsius.\n        .then(res => res.json())\n        .then(result => {\n          setWeather(result);\n          setQuery('');\n          console.log(result);\n        });\n    }\n  }\n\n  const dateBuilder = (d) => {\n    let months = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"];\n    let days = [\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"];\n\n    let day = days[d.getDay()];\n    let date = d.getDate();\n    let month = months[d.getMonth()];\n    let year = d.getFullYear();\n    console.log(typeof weather.weather[0].icon.charAt(2));\n    return `${day} ${date} ${month} ${year}`\n  }\n\n  return (\n    <div >\n      <div className={\n        (typeof weather.main != \"undefined\") ?\n          (\n            (weather.main.temp >= 18 && weather.weather[0].icon.charAt(2)==='n')?\n            'app warm n':\n            (weather.main.temp >= 18 && weather.weather[0].icon.charAt(2)==='d')?\n            'app warm d':\n            (weather.main.temp < 18 && weather.weather[0].icon.charAt(2)==='n')?\n            'app cold n':'app cold d'\n          )\n          : 'appd'}\n      >\n        <AppTitle >Weather app</AppTitle>\n        <main>\n          <div className=\"search-box\">\n            <input\n              type=\"text\"\n              className=\"search-bar\"\n              placeholder=\"Search...\"\n              onChange={e => setQuery(e.target.value)}\n              value={query}\n              onKeyPress={search}\n            />\n            <div id=\"clock\">\n              <ReactFitText compressor={2.5}>\n                <h4>\n                  <Clock format=\"h:mm:ss a\" interval={1000} ticking={true} />\n                </h4>\n              </ReactFitText>\n            </div>\n          </div>\n          {(typeof weather.main != \"undefined\") ? (\n            <div>\n              <div className=\"location-box\">\n                <div className=\"location\">{weather.name}, {weather.sys.country}</div>\n                <div className=\"date\">{dateBuilder(new Date())}</div>\n              </div>\n              <br /><br /><br /><br /><br />\n              <div className=\"weather-box\">\n                <div id=\"block_container\">\n\n                  <div id=\"icon\">\n                    <img\n                    alt=\"icon\"\n                      src={\"https://openweathermap.org/img/wn/\" + weather.weather[0].icon + \"@2x.png\"}\n                    >\n                    </img>\n                    <br />\n                    {weather.weather[0].description}\n                  </div>\n                  <div className=\"temp\" id=\"temp\">\n\n                    {Math.round(weather.main.temp)}℃\n                  <div id=\"feels\">\n                      <div className=\"feel_like\">RealFeel {Math.round(weather.main.feels_like)}℃</div>\n                      <div className=\"weather\">{weather.weather[0].main}</div>\n                    </div>\n                  </div>\n                </div>\n                <br /><br /><br /><br /><br />\n\n              </div>\n            </div>\n          ) : ('')}\n          <div id=\"footer\">\n            <div className=\"feel_like\">Made by </div>\n            <div className=\"weather\">Anurag Sharma</div>\n          </div>\n        </main>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport 'antd/dist/antd.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}